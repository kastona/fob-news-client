{"version":3,"file":"tiptap-extension-horizontal-rule.umd.js","sources":["../src/horizontal-rule.ts"],"sourcesContent":["import {\n  Node,\n  nodeInputRule,\n  mergeAttributes,\n} from '@tiptap/core'\nimport { TextSelection } from 'prosemirror-state'\n\nexport interface HorizontalRuleOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    horizontalRule: {\n      /**\n       * Add a horizontal rule\n       */\n      setHorizontalRule: () => ReturnType,\n    }\n  }\n}\n\nexport const HorizontalRule = Node.create<HorizontalRuleOptions>({\n  name: 'horizontalRule',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block',\n\n  parseHTML() {\n    return [\n      { tag: 'hr' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['hr', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  addCommands() {\n    return {\n      setHorizontalRule: () => ({ chain }) => {\n        return chain()\n          .insertContent({ type: this.name })\n          // set cursor after horizontal rule\n          .command(({ tr, dispatch }) => {\n            if (dispatch) {\n              const { parent, pos } = tr.selection.$from\n              const posAfter = pos + 1\n              const nodeAfter = tr.doc.nodeAt(posAfter)\n\n              if (nodeAfter) {\n                tr.setSelection(TextSelection.create(tr.doc, posAfter))\n              } else {\n                // add node after horizontal rule if it’s the end of the document\n                const node = parent.type.contentMatch.defaultType?.create()\n\n                if (node) {\n                  tr.insert(posAfter, node)\n                  tr.setSelection(TextSelection.create(tr.doc, posAfter))\n                }\n              }\n\n              tr.scrollIntoView()\n            }\n\n            return true\n          })\n          .run()\n      },\n    }\n  },\n\n  addInputRules() {\n    return [\n      nodeInputRule({\n        find: /^(?:---|—-|___\\s|\\*\\*\\*\\s)$/,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"],"names":["Node","mergeAttributes","TextSelection","nodeInputRule"],"mappings":";;;;;;QAsBa,cAAc,GAAGA,SAAI,CAAC,MAAM,CAAwB;MAC/D,IAAI,EAAE,gBAAgB;MAEtB,UAAU;UACR,OAAO;cACL,cAAc,EAAE,EAAE;WACnB,CAAA;OACF;MAED,KAAK,EAAE,OAAO;MAEd,SAAS;UACP,OAAO;cACL,EAAE,GAAG,EAAE,IAAI,EAAE;WACd,CAAA;OACF;MAED,UAAU,CAAC,EAAE,cAAc,EAAE;UAC3B,OAAO,CAAC,IAAI,EAAEC,oBAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,CAAA;OAC5E;MAED,WAAW;UACT,OAAO;cACL,iBAAiB,EAAE,MAAM,CAAC,EAAE,KAAK,EAAE;kBACjC,OAAO,KAAK,EAAE;uBACX,aAAa,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;;uBAElC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE;;sBACxB,IAAI,QAAQ,EAAE;0BACZ,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,KAAK,CAAA;0BAC1C,MAAM,QAAQ,GAAG,GAAG,GAAG,CAAC,CAAA;0BACxB,MAAM,SAAS,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;0BAEzC,IAAI,SAAS,EAAE;8BACb,EAAE,CAAC,YAAY,CAACC,8BAAa,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAA;2BACxD;+BAAM;;8BAEL,MAAM,IAAI,GAAG,MAAA,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,0CAAE,MAAM,EAAE,CAAA;8BAE3D,IAAI,IAAI,EAAE;kCACR,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;kCACzB,EAAE,CAAC,YAAY,CAACA,8BAAa,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAA;+BACxD;2BACF;0BAED,EAAE,CAAC,cAAc,EAAE,CAAA;uBACpB;sBAED,OAAO,IAAI,CAAA;mBACZ,CAAC;uBACD,GAAG,EAAE,CAAA;eACT;WACF,CAAA;OACF;MAED,aAAa;UACX,OAAO;cACLC,kBAAa,CAAC;kBACZ,IAAI,EAAE,6BAA6B;kBACnC,IAAI,EAAE,IAAI,CAAC,IAAI;eAChB,CAAC;WACH,CAAA;OACF;GACF;;;;;;;;;;;"}